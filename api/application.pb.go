// Code generated by protoc-gen-go.
// source: application.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateApplicationRequest struct {
	// Name of the application (must be unique).
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,3,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,4,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// Channel-list ID used for CFlist (see LoRaWAN regional parameters if this applies to your region).
	ChannelListID int64 `protobuf:"varint,5,opt,name=channelListID" json:"channelListID,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,6,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,7,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,8,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,9,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,10,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// Node is activated by ABP.
	IsABP bool `protobuf:"varint,11,opt,name=isABP" json:"isABP,omitempty"`
	// Node operates in Class-C.
	IsClassC bool `protobuf:"varint,12,opt,name=isClassC" json:"isClassC,omitempty"`
	// ID of the organization to which the application belongs.
	OrganizationID int64 `protobuf:"varint,14,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *CreateApplicationRequest) Reset()                    { *m = CreateApplicationRequest{} }
func (m *CreateApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateApplicationRequest) ProtoMessage()               {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CreateApplicationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateApplicationRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateApplicationRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *CreateApplicationRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *CreateApplicationRequest) GetChannelListID() int64 {
	if m != nil {
		return m.ChannelListID
	}
	return 0
}

func (m *CreateApplicationRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *CreateApplicationRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *CreateApplicationRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *CreateApplicationRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *CreateApplicationRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *CreateApplicationRequest) GetIsABP() bool {
	if m != nil {
		return m.IsABP
	}
	return false
}

func (m *CreateApplicationRequest) GetIsClassC() bool {
	if m != nil {
		return m.IsClassC
	}
	return false
}

func (m *CreateApplicationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type CreateApplicationResponse struct {
	// ID of the application that was created.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateApplicationResponse) Reset()                    { *m = CreateApplicationResponse{} }
func (m *CreateApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateApplicationResponse) ProtoMessage()               {}
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateApplicationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetApplicationRequest struct {
	// Name of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetApplicationRequest) Reset()                    { *m = GetApplicationRequest{} }
func (m *GetApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetApplicationRequest) ProtoMessage()               {}
func (*GetApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetApplicationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetApplicationResponse struct {
	// ID of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the application.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// Channel-list ID used for CFlist (see LoRaWAN regional parameters if this applies to your region).
	ChannelListID int64 `protobuf:"varint,6,opt,name=channelListID" json:"channelListID,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,9,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,10,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,11,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// Node is activated by ABP.
	IsABP bool `protobuf:"varint,12,opt,name=isABP" json:"isABP,omitempty"`
	// Node operates in Class-C.
	IsClassC bool `protobuf:"varint,13,opt,name=isClassC" json:"isClassC,omitempty"`
	// ID of the organization to which the application belongs.
	OrganizationID int64 `protobuf:"varint,14,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *GetApplicationResponse) Reset()                    { *m = GetApplicationResponse{} }
func (m *GetApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetApplicationResponse) ProtoMessage()               {}
func (*GetApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetApplicationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetApplicationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetApplicationResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetApplicationResponse) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *GetApplicationResponse) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *GetApplicationResponse) GetChannelListID() int64 {
	if m != nil {
		return m.ChannelListID
	}
	return 0
}

func (m *GetApplicationResponse) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *GetApplicationResponse) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *GetApplicationResponse) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *GetApplicationResponse) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *GetApplicationResponse) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *GetApplicationResponse) GetIsABP() bool {
	if m != nil {
		return m.IsABP
	}
	return false
}

func (m *GetApplicationResponse) GetIsClassC() bool {
	if m != nil {
		return m.IsClassC
	}
	return false
}

func (m *GetApplicationResponse) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type UpdateApplicationRequest struct {
	// ID of the application to update.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the application (must be unique).
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// RX delay.
	RxDelay uint32 `protobuf:"varint,4,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// RX1 data-rate offset.
	Rx1DROffset uint32 `protobuf:"varint,5,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// Channel-list ID used for CFlist (see LoRaWAN regional parameters if this applies to your region).
	ChannelListID int64 `protobuf:"varint,6,opt,name=channelListID" json:"channelListID,omitempty"`
	// RX window to use.
	RxWindow RXWindow `protobuf:"varint,7,opt,name=rxWindow,enum=api.RXWindow" json:"rxWindow,omitempty"`
	// Data-rate to use for RX2.
	Rx2DR uint32 `protobuf:"varint,8,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Relax frame-counter mode is enabled.
	RelaxFCnt bool `protobuf:"varint,9,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	AdrInterval uint32 `protobuf:"varint,10,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// Installation-margin to use for ADR calculation.
	InstallationMargin float64 `protobuf:"fixed64,11,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// Node is activated by ABP.
	IsABP bool `protobuf:"varint,12,opt,name=isABP" json:"isABP,omitempty"`
	// Node operates in Class-C.
	IsClassC bool `protobuf:"varint,13,opt,name=isClassC" json:"isClassC,omitempty"`
	// ID of the organization to which the application belongs.
	OrganizationID int64 `protobuf:"varint,14,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *UpdateApplicationRequest) Reset()                    { *m = UpdateApplicationRequest{} }
func (m *UpdateApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationRequest) ProtoMessage()               {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *UpdateApplicationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateApplicationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateApplicationRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateApplicationRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *UpdateApplicationRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *UpdateApplicationRequest) GetChannelListID() int64 {
	if m != nil {
		return m.ChannelListID
	}
	return 0
}

func (m *UpdateApplicationRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *UpdateApplicationRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *UpdateApplicationRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *UpdateApplicationRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *UpdateApplicationRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *UpdateApplicationRequest) GetIsABP() bool {
	if m != nil {
		return m.IsABP
	}
	return false
}

func (m *UpdateApplicationRequest) GetIsClassC() bool {
	if m != nil {
		return m.IsClassC
	}
	return false
}

func (m *UpdateApplicationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type UpdateApplicationResponse struct {
}

func (m *UpdateApplicationResponse) Reset()                    { *m = UpdateApplicationResponse{} }
func (m *UpdateApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationResponse) ProtoMessage()               {}
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type DeleteApplicationRequest struct {
	// ID of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteApplicationRequest) Reset()                    { *m = DeleteApplicationRequest{} }
func (m *DeleteApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationRequest) ProtoMessage()               {}
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *DeleteApplicationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteApplicationResponse struct {
}

func (m *DeleteApplicationResponse) Reset()                    { *m = DeleteApplicationResponse{} }
func (m *DeleteApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationResponse) ProtoMessage()               {}
func (*DeleteApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type ListApplicationRequest struct {
	// Max number of applications to return in the result-test.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// ID of the organization to filter on.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *ListApplicationRequest) Reset()                    { *m = ListApplicationRequest{} }
func (m *ListApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationRequest) ProtoMessage()               {}
func (*ListApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ListApplicationRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListApplicationRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListApplicationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type ListApplicationResponse struct {
	// Total number of applications available within the result-set.
	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Applications within this result-set.
	Result []*GetApplicationResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListApplicationResponse) Reset()                    { *m = ListApplicationResponse{} }
func (m *ListApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationResponse) ProtoMessage()               {}
func (*ListApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *ListApplicationResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListApplicationResponse) GetResult() []*GetApplicationResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type ListApplicationUsersRequest struct {
	// The id of the application
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Max number of applications to return in the result-test.
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListApplicationUsersRequest) Reset()                    { *m = ListApplicationUsersRequest{} }
func (m *ListApplicationUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationUsersRequest) ProtoMessage()               {}
func (*ListApplicationUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *ListApplicationUsersRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListApplicationUsersRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListApplicationUsersRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetApplicationUserResponse struct {
	// The id of the user
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The username for the user
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// Has admin rights.
	IsAdmin bool `protobuf:"varint,3,opt,name=isAdmin" json:"isAdmin,omitempty"`
}

func (m *GetApplicationUserResponse) Reset()                    { *m = GetApplicationUserResponse{} }
func (m *GetApplicationUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetApplicationUserResponse) ProtoMessage()               {}
func (*GetApplicationUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *GetApplicationUserResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetApplicationUserResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetApplicationUserResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type ListApplicationUsersResponse struct {
	// Total number of applications available within the result-set.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Applications within this result-set.
	Result []*GetApplicationUserResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListApplicationUsersResponse) Reset()                    { *m = ListApplicationUsersResponse{} }
func (m *ListApplicationUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationUsersResponse) ProtoMessage()               {}
func (*ListApplicationUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *ListApplicationUsersResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListApplicationUsersResponse) GetResult() []*GetApplicationUserResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type AddApplicationUserRequest struct {
	// The application to be set to allow these users
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// User id
	UserID int64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
	// admin rights?
	IsAdmin bool `protobuf:"varint,3,opt,name=isAdmin" json:"isAdmin,omitempty"`
}

func (m *AddApplicationUserRequest) Reset()                    { *m = AddApplicationUserRequest{} }
func (m *AddApplicationUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AddApplicationUserRequest) ProtoMessage()               {}
func (*AddApplicationUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *AddApplicationUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddApplicationUserRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *AddApplicationUserRequest) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type ApplicationUserRequest struct {
	// The application id
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The user id
	UserID int64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *ApplicationUserRequest) Reset()                    { *m = ApplicationUserRequest{} }
func (m *ApplicationUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplicationUserRequest) ProtoMessage()               {}
func (*ApplicationUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *ApplicationUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ApplicationUserRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type UpdateApplicationUserRequest struct {
	// The application id
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The user id
	UserID int64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
	// Is admin?
	IsAdmin bool `protobuf:"varint,3,opt,name=isAdmin" json:"isAdmin,omitempty"`
}

func (m *UpdateApplicationUserRequest) Reset()                    { *m = UpdateApplicationUserRequest{} }
func (m *UpdateApplicationUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationUserRequest) ProtoMessage()               {}
func (*UpdateApplicationUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *UpdateApplicationUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateApplicationUserRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UpdateApplicationUserRequest) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type EmptyApplicationUserResponse struct {
}

func (m *EmptyApplicationUserResponse) Reset()                    { *m = EmptyApplicationUserResponse{} }
func (m *EmptyApplicationUserResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyApplicationUserResponse) ProtoMessage()               {}
func (*EmptyApplicationUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func init() {
	proto.RegisterType((*CreateApplicationRequest)(nil), "api.CreateApplicationRequest")
	proto.RegisterType((*CreateApplicationResponse)(nil), "api.CreateApplicationResponse")
	proto.RegisterType((*GetApplicationRequest)(nil), "api.GetApplicationRequest")
	proto.RegisterType((*GetApplicationResponse)(nil), "api.GetApplicationResponse")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "api.UpdateApplicationRequest")
	proto.RegisterType((*UpdateApplicationResponse)(nil), "api.UpdateApplicationResponse")
	proto.RegisterType((*DeleteApplicationRequest)(nil), "api.DeleteApplicationRequest")
	proto.RegisterType((*DeleteApplicationResponse)(nil), "api.DeleteApplicationResponse")
	proto.RegisterType((*ListApplicationRequest)(nil), "api.ListApplicationRequest")
	proto.RegisterType((*ListApplicationResponse)(nil), "api.ListApplicationResponse")
	proto.RegisterType((*ListApplicationUsersRequest)(nil), "api.ListApplicationUsersRequest")
	proto.RegisterType((*GetApplicationUserResponse)(nil), "api.GetApplicationUserResponse")
	proto.RegisterType((*ListApplicationUsersResponse)(nil), "api.ListApplicationUsersResponse")
	proto.RegisterType((*AddApplicationUserRequest)(nil), "api.AddApplicationUserRequest")
	proto.RegisterType((*ApplicationUserRequest)(nil), "api.ApplicationUserRequest")
	proto.RegisterType((*UpdateApplicationUserRequest)(nil), "api.UpdateApplicationUserRequest")
	proto.RegisterType((*EmptyApplicationUserResponse)(nil), "api.EmptyApplicationUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Application service

type ApplicationClient interface {
	// Create creates the given application.
	Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// Get returns the requested application.
	Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	// Update updates the given application.
	Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	// Delete deletes the given application.
	Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	// List lists the available applications.
	List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error)
	// ListUsers lists the users for an application.
	ListUsers(ctx context.Context, in *ListApplicationUsersRequest, opts ...grpc.CallOption) (*ListApplicationUsersResponse, error)
	// AddUser adds a user to an application.
	AddUser(ctx context.Context, in *AddApplicationUserRequest, opts ...grpc.CallOption) (*EmptyApplicationUserResponse, error)
	// GetUser gets the user that is associated with the application.
	GetUser(ctx context.Context, in *ApplicationUserRequest, opts ...grpc.CallOption) (*GetApplicationUserResponse, error)
	// UpdateUser sets the user's access to the associated application.
	UpdateUser(ctx context.Context, in *UpdateApplicationUserRequest, opts ...grpc.CallOption) (*EmptyApplicationUserResponse, error)
	// DeleteUser deletes the user's access to the associated application.
	DeleteUser(ctx context.Context, in *ApplicationUserRequest, opts ...grpc.CallOption) (*EmptyApplicationUserResponse, error)
}

type applicationClient struct {
	cc *grpc.ClientConn
}

func NewApplicationClient(cc *grpc.ClientConn) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error) {
	out := new(ListApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ListUsers(ctx context.Context, in *ListApplicationUsersRequest, opts ...grpc.CallOption) (*ListApplicationUsersResponse, error) {
	out := new(ListApplicationUsersResponse)
	err := grpc.Invoke(ctx, "/api.Application/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) AddUser(ctx context.Context, in *AddApplicationUserRequest, opts ...grpc.CallOption) (*EmptyApplicationUserResponse, error) {
	out := new(EmptyApplicationUserResponse)
	err := grpc.Invoke(ctx, "/api.Application/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) GetUser(ctx context.Context, in *ApplicationUserRequest, opts ...grpc.CallOption) (*GetApplicationUserResponse, error) {
	out := new(GetApplicationUserResponse)
	err := grpc.Invoke(ctx, "/api.Application/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) UpdateUser(ctx context.Context, in *UpdateApplicationUserRequest, opts ...grpc.CallOption) (*EmptyApplicationUserResponse, error) {
	out := new(EmptyApplicationUserResponse)
	err := grpc.Invoke(ctx, "/api.Application/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) DeleteUser(ctx context.Context, in *ApplicationUserRequest, opts ...grpc.CallOption) (*EmptyApplicationUserResponse, error) {
	out := new(EmptyApplicationUserResponse)
	err := grpc.Invoke(ctx, "/api.Application/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Application service

type ApplicationServer interface {
	// Create creates the given application.
	Create(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// Get returns the requested application.
	Get(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	// Update updates the given application.
	Update(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	// Delete deletes the given application.
	Delete(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	// List lists the available applications.
	List(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error)
	// ListUsers lists the users for an application.
	ListUsers(context.Context, *ListApplicationUsersRequest) (*ListApplicationUsersResponse, error)
	// AddUser adds a user to an application.
	AddUser(context.Context, *AddApplicationUserRequest) (*EmptyApplicationUserResponse, error)
	// GetUser gets the user that is associated with the application.
	GetUser(context.Context, *ApplicationUserRequest) (*GetApplicationUserResponse, error)
	// UpdateUser sets the user's access to the associated application.
	UpdateUser(context.Context, *UpdateApplicationUserRequest) (*EmptyApplicationUserResponse, error)
	// DeleteUser deletes the user's access to the associated application.
	DeleteUser(context.Context, *ApplicationUserRequest) (*EmptyApplicationUserResponse, error)
}

func RegisterApplicationServer(s *grpc.Server, srv ApplicationServer) {
	s.RegisterService(&_Application_serviceDesc, srv)
}

func _Application_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Create(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Get(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Update(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Delete(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).List(ctx, req.(*ListApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ListUsers(ctx, req.(*ListApplicationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).AddUser(ctx, req.(*AddApplicationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).GetUser(ctx, req.(*ApplicationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).UpdateUser(ctx, req.(*UpdateApplicationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).DeleteUser(ctx, req.(*ApplicationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Application_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Application_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Application_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Application_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Application_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Application_List_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Application_ListUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Application_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Application_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Application_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Application_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application.proto",
}

func init() { proto.RegisterFile("application.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xe3, 0xc6, 0x49, 0x4e, 0xda, 0x4a, 0x3b, 0x2c, 0x61, 0xea, 0x86, 0x90, 0x5a, 0x0b,
	0x0d, 0x41, 0x34, 0xd0, 0xbd, 0x40, 0xe2, 0x8a, 0x90, 0x40, 0x55, 0x09, 0x04, 0xb2, 0xb4, 0x02,
	0x89, 0x1f, 0x31, 0x1b, 0xcf, 0x86, 0x41, 0x8e, 0x6d, 0x3c, 0x4e, 0x37, 0x4b, 0xd5, 0x1b, 0xc4,
	0x1b, 0xf0, 0x3c, 0x3c, 0x01, 0xe2, 0x8a, 0x57, 0xe0, 0x09, 0x78, 0x02, 0xe4, 0x99, 0x49, 0xea,
	0x26, 0x33, 0x4e, 0xf8, 0xb9, 0x41, 0xda, 0xbb, 0x9e, 0x33, 0x67, 0xce, 0x37, 0xe7, 0x3b, 0xdf,
	0x39, 0x71, 0xe1, 0x1e, 0x49, 0x92, 0x90, 0x4d, 0x48, 0xc6, 0xe2, 0xe8, 0x2c, 0x49, 0xe3, 0x2c,
	0x46, 0x36, 0x49, 0x98, 0xdb, 0x9e, 0xc6, 0xf1, 0x34, 0xa4, 0x03, 0x92, 0xb0, 0x01, 0x89, 0xa2,
	0x38, 0x13, 0x11, 0x5c, 0x86, 0xb8, 0xfb, 0x93, 0x78, 0x36, 0x5b, 0x5e, 0xf0, 0x7e, 0xb1, 0x01,
	0x8f, 0x52, 0x4a, 0x32, 0x3a, 0xbc, 0x4d, 0xe6, 0xd3, 0xef, 0xe7, 0x94, 0x67, 0x08, 0xc1, 0x5e,
	0x44, 0x66, 0x14, 0x5b, 0x5d, 0xab, 0xd7, 0xf0, 0xc5, 0xdf, 0xa8, 0x0b, 0xcd, 0x80, 0xf2, 0x49,
	0xca, 0x92, 0x3c, 0x12, 0x57, 0xc4, 0x51, 0xd1, 0x85, 0x30, 0xd4, 0xd2, 0xc5, 0x98, 0x86, 0xe4,
	0x19, 0xb6, 0xbb, 0x56, 0xef, 0xc0, 0x5f, 0x9a, 0xf9, 0xdd, 0x74, 0xf1, 0xf6, 0xd8, 0xff, 0xe4,
	0xc9, 0x13, 0x4e, 0x33, 0xbc, 0x27, 0x4e, 0x8b, 0x2e, 0xf4, 0x00, 0x0e, 0x26, 0xdf, 0x92, 0x28,
	0xa2, 0xe1, 0x47, 0x8c, 0x67, 0x97, 0x63, 0x5c, 0xed, 0x5a, 0x3d, 0xdb, 0xbf, 0xeb, 0x44, 0xaf,
	0x43, 0x3d, 0x5d, 0x7c, 0xc6, 0xa2, 0x20, 0x7e, 0x8a, 0x9d, 0xae, 0xd5, 0x3b, 0x3c, 0x3f, 0x38,
	0x23, 0x09, 0x3b, 0xf3, 0x3f, 0x97, 0x4e, 0x7f, 0x75, 0x8c, 0xee, 0x43, 0x35, 0x5d, 0x9c, 0x8f,
	0x7d, 0x5c, 0x13, 0x60, 0xd2, 0x40, 0x6d, 0x68, 0xa4, 0x34, 0x24, 0x8b, 0x0f, 0x47, 0x51, 0x86,
	0xeb, 0x5d, 0xab, 0x57, 0xf7, 0x6f, 0x1d, 0xf9, 0x33, 0x49, 0x90, 0x5e, 0x46, 0x19, 0x4d, 0xaf,
	0x48, 0x88, 0x1b, 0xf2, 0x99, 0x05, 0x17, 0x3a, 0x03, 0xc4, 0x22, 0x9e, 0x91, 0x30, 0x14, 0x7c,
	0x7d, 0x4c, 0xd2, 0x29, 0x8b, 0x30, 0x74, 0xad, 0x9e, 0xe5, 0x6b, 0x4e, 0xf2, 0x57, 0x30, 0x3e,
	0x7c, 0xff, 0x53, 0xdc, 0x14, 0x58, 0xd2, 0x40, 0x2e, 0xd4, 0x19, 0x1f, 0x85, 0x84, 0xf3, 0x11,
	0xde, 0x17, 0x07, 0x2b, 0x1b, 0xbd, 0x06, 0x87, 0x71, 0x3a, 0x25, 0x11, 0xfb, 0x41, 0xe4, 0xb9,
	0x1c, 0xe3, 0x43, 0xc1, 0xc4, 0x9a, 0xd7, 0x7b, 0x03, 0x8e, 0x34, 0xed, 0xe3, 0x49, 0x1c, 0x71,
	0x8a, 0x0e, 0xa1, 0xc2, 0x02, 0xd1, 0x3d, 0xdb, 0xaf, 0xb0, 0xc0, 0x3b, 0x85, 0x17, 0x2f, 0x68,
	0xa6, 0x69, 0xf4, 0x7a, 0xe0, 0xaf, 0x36, 0xb4, 0xd6, 0x23, 0xf5, 0x39, 0x57, 0x1a, 0xa9, 0x98,
	0x35, 0x62, 0x97, 0x6a, 0x64, 0xaf, 0x54, 0x23, 0xd5, 0x1d, 0x34, 0xe2, 0x6c, 0xd3, 0x48, 0x6d,
	0x47, 0x8d, 0xd4, 0x8d, 0x1a, 0x69, 0x6c, 0xd1, 0x08, 0xec, 0xaa, 0x91, 0xe6, 0x76, 0x8d, 0xec,
	0x9b, 0x34, 0x72, 0xf0, 0x0f, 0x35, 0xf2, 0x9b, 0x0d, 0xf8, 0x51, 0x12, 0xe8, 0x67, 0xfc, 0x79,
	0x3f, 0xff, 0x77, 0xfd, 0x3c, 0x86, 0x23, 0x4d, 0x3b, 0xe5, 0x7c, 0x7a, 0x7d, 0xc0, 0x63, 0x1a,
	0xd2, 0x5d, 0x7a, 0x9d, 0x27, 0xd2, 0xc4, 0xaa, 0x44, 0x11, 0xb4, 0x72, 0xea, 0x35, 0x69, 0xee,
	0x43, 0x35, 0x64, 0x33, 0x96, 0xa9, 0x4c, 0xd2, 0x40, 0x2d, 0x70, 0x62, 0xd9, 0xe3, 0x8a, 0x70,
	0x2b, 0x4b, 0x53, 0x95, 0xad, 0xad, 0x2a, 0x82, 0x97, 0x36, 0xf0, 0xd4, 0xce, 0xe9, 0x00, 0x64,
	0x71, 0x46, 0xc2, 0x51, 0x3c, 0x8f, 0x96, 0xa8, 0x05, 0x0f, 0x7a, 0x08, 0x4e, 0x4a, 0xf9, 0x3c,
	0xcc, 0xa1, 0xed, 0x5e, 0xf3, 0xfc, 0x58, 0x28, 0x43, 0xbf, 0xc0, 0x7c, 0x15, 0xea, 0x7d, 0x01,
	0xc7, 0x6b, 0x78, 0x8f, 0x38, 0x4d, 0xb9, 0x69, 0x2e, 0x56, 0x45, 0x57, 0xf4, 0x45, 0xdb, 0xc5,
	0xa2, 0xbd, 0xc7, 0xe0, 0xde, 0x85, 0xcf, 0x73, 0x1b, 0x77, 0xa8, 0x0b, 0xf5, 0x39, 0xa7, 0x69,
	0x61, 0xee, 0x56, 0x76, 0x3e, 0x59, 0x8c, 0x0f, 0x83, 0x19, 0x93, 0x73, 0x57, 0xf7, 0x97, 0xa6,
	0xf7, 0x14, 0xda, 0xfa, 0x02, 0x8c, 0xac, 0x55, 0xef, 0xb0, 0xf6, 0xce, 0x1a, 0x6b, 0xaf, 0x68,
	0x58, 0x2b, 0x3e, 0x7b, 0xc5, 0xdc, 0x57, 0x70, 0x34, 0x0c, 0x82, 0x8d, 0x28, 0x3d, 0x6f, 0x2d,
	0x70, 0xf2, 0x5a, 0x2e, 0xc7, 0x4b, 0x59, 0x48, 0xab, 0xa4, 0xae, 0xf7, 0xa0, 0xf5, 0xef, 0x72,
	0x7b, 0xdf, 0x40, 0x7b, 0x63, 0x40, 0xfe, 0xdb, 0x37, 0x76, 0xa0, 0xfd, 0xc1, 0x2c, 0xc9, 0x9e,
	0x19, 0xa8, 0x3a, 0xff, 0xb3, 0x0e, 0xcd, 0xc2, 0x19, 0xa2, 0xe0, 0xc8, 0x9f, 0x69, 0xf4, 0xb2,
	0x60, 0xd9, 0xf4, 0xc9, 0xe5, 0x76, 0x4c, 0xc7, 0x6a, 0x2a, 0xdb, 0x3f, 0xfe, 0xfe, 0xc7, 0xcf,
	0x95, 0x96, 0x77, 0x4f, 0x7e, 0xdd, 0xdd, 0x46, 0xf0, 0x77, 0xad, 0x3e, 0xfa, 0x1a, 0xec, 0x0b,
	0x9a, 0x21, 0x57, 0xab, 0x7f, 0x09, 0x50, 0x36, 0x1b, 0x5e, 0x47, 0x64, 0xc7, 0xa8, 0xb5, 0x91,
	0x7d, 0x70, 0xcd, 0x82, 0x1b, 0xf4, 0x1d, 0x38, 0x92, 0x58, 0x55, 0x86, 0xe9, 0x57, 0x45, 0x95,
	0x61, 0xde, 0x52, 0x27, 0x02, 0xe8, 0xd8, 0x35, 0x00, 0xe5, 0xb5, 0x4c, 0xc1, 0x91, 0xcb, 0x49,
	0x61, 0x99, 0xb6, 0x9a, 0xc2, 0x32, 0x2f, 0x32, 0x55, 0x54, 0xdf, 0x54, 0xd4, 0x97, 0xb0, 0x97,
	0xcf, 0x11, 0x92, 0xcc, 0xe8, 0x77, 0x9e, 0xdb, 0xd6, 0x1f, 0x2a, 0x88, 0x23, 0x01, 0xf1, 0x02,
	0xda, 0xec, 0x0a, 0xba, 0x82, 0x46, 0x7e, 0x4b, 0x8c, 0x26, 0xea, 0xea, 0xb2, 0x14, 0xd7, 0x8e,
	0x7b, 0x52, 0x12, 0xa1, 0xc0, 0x1e, 0x08, 0xb0, 0x0e, 0x6a, 0xeb, 0xeb, 0x19, 0xcc, 0x05, 0xd4,
	0x1c, 0x6a, 0xc3, 0x20, 0xc8, 0x6f, 0x22, 0x49, 0x90, 0x71, 0x64, 0x15, 0x66, 0x99, 0x9e, 0xbd,
	0x53, 0x81, 0x79, 0xe2, 0x95, 0x62, 0xe6, 0x5d, 0xbb, 0x82, 0xda, 0x05, 0x15, 0xd5, 0x2a, 0x3e,
	0x0d, 0x98, 0xdb, 0x96, 0x8d, 0xf7, 0xa6, 0x40, 0x3c, 0x45, 0xaf, 0x96, 0x21, 0x0e, 0xae, 0xe5,
	0xa4, 0xde, 0xa0, 0x9f, 0x2c, 0x00, 0x29, 0x37, 0x81, 0x7d, 0xa2, 0xd7, 0xdf, 0xdf, 0xac, 0xfa,
	0x2d, 0xf1, 0x86, 0xbe, 0xbb, 0xdb, 0x1b, 0xf2, 0xf2, 0xaf, 0x01, 0xa4, 0x10, 0xb7, 0x33, 0xb0,
	0x03, 0xbe, 0xe2, 0xa0, 0xbf, 0x1b, 0xfe, 0x63, 0x47, 0xfc, 0x4b, 0xf7, 0xf0, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x48, 0x32, 0xca, 0x98, 0x18, 0x0e, 0x00, 0x00,
}
