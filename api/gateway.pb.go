// Code generated by protoc-gen-go.
// source: gateway.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateGatewayRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway -90 to 90
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180 to 180
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
}

func (m *CreateGatewayRequest) Reset()                    { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()               {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *CreateGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *CreateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type CreateGatewayResponse struct {
}

func (m *CreateGatewayResponse) Reset()                    { *m = CreateGatewayResponse{} }
func (m *CreateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayResponse) ProtoMessage()               {}
func (*CreateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

type GetGatewayRequest struct {
	// Hex encoded mac address of the node.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *GetGatewayRequest) Reset()                    { *m = GetGatewayRequest{} }
func (m *GetGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayRequest) ProtoMessage()               {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *GetGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type GetGatewayResponse struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway -90.0 to 90.0
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// Creation timestamp of the record
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt" json:"createdAt,omitempty"`
	// Last update timestamp of the record
	UpdatedAt string `protobuf:"bytes,8,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// The timestamp of the first data from the gateway.
	FirstSeenAt string `protobuf:"bytes,9,opt,name=firstSeenAt" json:"firstSeenAt,omitempty"`
	// The timestamp of the most recent data from the gateway.
	LastSeenAt string `protobuf:"bytes,10,opt,name=lastSeenAt" json:"lastSeenAt,omitempty"`
}

func (m *GetGatewayResponse) Reset()                    { *m = GetGatewayResponse{} }
func (m *GetGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayResponse) ProtoMessage()               {}
func (*GetGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *GetGatewayResponse) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *GetGatewayResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetGatewayResponse) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetGatewayResponse) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetGatewayResponse) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *GetGatewayResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetFirstSeenAt() string {
	if m != nil {
		return m.FirstSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetLastSeenAt() string {
	if m != nil {
		return m.LastSeenAt
	}
	return ""
}

type DeleteGatewayRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *DeleteGatewayRequest) Reset()                    { *m = DeleteGatewayRequest{} }
func (m *DeleteGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayRequest) ProtoMessage()               {}
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *DeleteGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type DeleteGatewayResponse struct {
}

func (m *DeleteGatewayResponse) Reset()                    { *m = DeleteGatewayResponse{} }
func (m *DeleteGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayResponse) ProtoMessage()               {}
func (*DeleteGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

type ListGatewayRequest struct {
	// Max number of nodes to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListGatewayRequest) Reset()                    { *m = ListGatewayRequest{} }
func (m *ListGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayRequest) ProtoMessage()               {}
func (*ListGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *ListGatewayRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListGatewayResponse struct {
	// Total number of nodes available within the result-set.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Nodes within this result-set.
	Result []*GetGatewayResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayResponse) Reset()                    { *m = ListGatewayResponse{} }
func (m *ListGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayResponse) ProtoMessage()               {}
func (*ListGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *ListGatewayResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayResponse) GetResult() []*GetGatewayResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateGatewayRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway -90.0 to 90.0
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()                    { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()               {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *UpdateGatewayRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *UpdateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type UpdateGatewayResponse struct {
}

func (m *UpdateGatewayResponse) Reset()                    { *m = UpdateGatewayResponse{} }
func (m *UpdateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayResponse) ProtoMessage()               {}
func (*UpdateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

type GatewayStats struct {
	// Timestamp of the (aggregated) measurement.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Packets received by the gateway.
	RxPacketsReceived int32 `protobuf:"varint,2,opt,name=rxPacketsReceived" json:"rxPacketsReceived,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RxPacketsReceivedOK int32 `protobuf:"varint,3,opt,name=rxPacketsReceivedOK" json:"rxPacketsReceivedOK,omitempty"`
	// Packets received by the gateway for transmission.
	TxPacketsReceived int32 `protobuf:"varint,4,opt,name=txPacketsReceived" json:"txPacketsReceived,omitempty"`
	// Packets transmitted by the gateway.
	TxPacketsEmitted int32 `protobuf:"varint,5,opt,name=txPacketsEmitted" json:"txPacketsEmitted,omitempty"`
}

func (m *GatewayStats) Reset()                    { *m = GatewayStats{} }
func (m *GatewayStats) String() string            { return proto.CompactTextString(m) }
func (*GatewayStats) ProtoMessage()               {}
func (*GatewayStats) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *GatewayStats) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *GatewayStats) GetRxPacketsReceived() int32 {
	if m != nil {
		return m.RxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetRxPacketsReceivedOK() int32 {
	if m != nil {
		return m.RxPacketsReceivedOK
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsReceived() int32 {
	if m != nil {
		return m.TxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsEmitted() int32 {
	if m != nil {
		return m.TxPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	// Hex encoded mac address.
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Aggregation interval.  One of "second", "minute", "hour", "day", "week",
	// "month", "quarter", "year".  Case insensitive.
	Interval string `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestamp string `protobuf:"bytes,3,opt,name=startTimestamp" json:"startTimestamp,omitempty"`
	// Timestamp until to get from.
	EndTimestamp string `protobuf:"bytes,4,opt,name=endTimestamp" json:"endTimestamp,omitempty"`
}

func (m *GetGatewayStatsRequest) Reset()                    { *m = GetGatewayStatsRequest{} }
func (m *GetGatewayStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsRequest) ProtoMessage()               {}
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *GetGatewayStatsRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

type GetGatewayStatsResponse struct {
	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetGatewayStatsResponse) Reset()                    { *m = GetGatewayStatsResponse{} }
func (m *GetGatewayStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsResponse) ProtoMessage()               {}
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateGatewayRequest)(nil), "api.CreateGatewayRequest")
	proto.RegisterType((*CreateGatewayResponse)(nil), "api.CreateGatewayResponse")
	proto.RegisterType((*GetGatewayRequest)(nil), "api.GetGatewayRequest")
	proto.RegisterType((*GetGatewayResponse)(nil), "api.GetGatewayResponse")
	proto.RegisterType((*DeleteGatewayRequest)(nil), "api.DeleteGatewayRequest")
	proto.RegisterType((*DeleteGatewayResponse)(nil), "api.DeleteGatewayResponse")
	proto.RegisterType((*ListGatewayRequest)(nil), "api.ListGatewayRequest")
	proto.RegisterType((*ListGatewayResponse)(nil), "api.ListGatewayResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "api.UpdateGatewayRequest")
	proto.RegisterType((*UpdateGatewayResponse)(nil), "api.UpdateGatewayResponse")
	proto.RegisterType((*GatewayStats)(nil), "api.GatewayStats")
	proto.RegisterType((*GetGatewayStatsRequest)(nil), "api.GetGatewayStatsRequest")
	proto.RegisterType((*GetGatewayStatsResponse)(nil), "api.GetGatewayStatsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gateway service

type GatewayClient interface {
	// Create creates the given gateway.
	Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error)
	// Get returns the gateway for the requested mac address.
	Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// Update updates the gateway matching the given mac address.
	Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error)
	// Delete deletes the gateway matching the given mac address.
	Delete(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error)
	// List lists the gateways.
	List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	// GetStats lists the gateway stats given the query parameters.
	GetStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error) {
	out := new(CreateGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error) {
	out := new(UpdateGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Delete(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error) {
	out := new(DeleteGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := grpc.Invoke(ctx, "/api.Gateway/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gateway service

type GatewayServer interface {
	// Create creates the given gateway.
	Create(context.Context, *CreateGatewayRequest) (*CreateGatewayResponse, error)
	// Get returns the gateway for the requested mac address.
	Get(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// Update updates the gateway matching the given mac address.
	Update(context.Context, *UpdateGatewayRequest) (*UpdateGatewayResponse, error)
	// Delete deletes the gateway matching the given mac address.
	Delete(context.Context, *DeleteGatewayRequest) (*DeleteGatewayResponse, error)
	// List lists the gateways.
	List(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	// GetStats lists the gateway stats given the query parameters.
	GetStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Create(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Get(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Update(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Delete(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).List(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Gateway_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Gateway_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gateway_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Gateway_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Gateway_List_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Gateway_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x55, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0x97, 0x9b, 0x8f, 0xa6, 0xd3, 0xf6, 0xff, 0x6f, 0xa7, 0x5f, 0xae, 0x5b, 0x55, 0xc5, 0x12,
	0x28, 0x54, 0xa8, 0x41, 0xe5, 0xc6, 0xad, 0xb4, 0x28, 0x07, 0x90, 0xa8, 0x5c, 0x38, 0x20, 0x21,
	0xa1, 0x25, 0x99, 0x84, 0x15, 0x8e, 0x6d, 0xbc, 0x93, 0x02, 0x42, 0x5c, 0x78, 0x04, 0x78, 0x11,
	0x0e, 0x7d, 0x13, 0x5e, 0x01, 0xf1, 0x1c, 0xc8, 0xbb, 0x5b, 0xc7, 0x89, 0x5d, 0xf5, 0x0a, 0x37,
	0xef, 0xef, 0x37, 0xf3, 0xdb, 0xf9, 0xda, 0x31, 0x2c, 0x0f, 0x05, 0xd3, 0x07, 0xf1, 0xe9, 0x30,
	0x49, 0x63, 0x8e, 0xb1, 0x26, 0x12, 0xe9, 0xed, 0x0e, 0xe3, 0x78, 0x18, 0x52, 0x47, 0x24, 0xb2,
	0x23, 0xa2, 0x28, 0x66, 0xc1, 0x32, 0x8e, 0x94, 0x31, 0xf1, 0x2f, 0x1d, 0x58, 0x3f, 0x49, 0x49,
	0x30, 0x75, 0x8d, 0x6b, 0x40, 0xef, 0xc7, 0xa4, 0x18, 0x57, 0xa0, 0x36, 0x12, 0x3d, 0xd7, 0xd9,
	0x77, 0xda, 0x0b, 0x41, 0xf6, 0x89, 0x08, 0xf5, 0x48, 0x8c, 0xc8, 0x9d, 0xd3, 0x90, 0xfe, 0xc6,
	0x7d, 0x58, 0xec, 0x93, 0xea, 0xa5, 0x32, 0xc9, 0x44, 0xdd, 0x9a, 0xa6, 0x8a, 0x10, 0x7a, 0xd0,
	0x0a, 0x05, 0x4b, 0x1e, 0xf7, 0xc9, 0xad, 0xef, 0x3b, 0x6d, 0x27, 0xc8, 0xcf, 0xb8, 0x0b, 0x0b,
	0x61, 0x1c, 0x0d, 0x0d, 0xd9, 0xd0, 0xe4, 0x04, 0xc8, 0x3c, 0x45, 0x68, 0x3d, 0x9b, 0xc6, 0xf3,
	0xea, 0xec, 0x6f, 0xc1, 0xc6, 0x4c, 0xd4, 0x2a, 0x89, 0x23, 0x45, 0xfe, 0x6d, 0x58, 0xed, 0x12,
	0xdf, 0x94, 0x8b, 0xff, 0x63, 0x0e, 0xb0, 0x68, 0x67, 0xbc, 0xff, 0xee, 0xa4, 0x33, 0xcf, 0x9e,
	0x4e, 0xba, 0x7f, 0xcc, 0xee, 0xbc, 0xbe, 0x75, 0x02, 0x64, 0xec, 0x38, 0xe9, 0x5b, 0xb6, 0x65,
	0xd8, 0x1c, 0xc8, 0x62, 0x1e, 0xc8, 0x54, 0xf1, 0x39, 0x51, 0x74, 0xcc, 0xee, 0x82, 0x89, 0xb9,
	0x00, 0xe1, 0x1e, 0x40, 0x28, 0x72, 0x03, 0xd0, 0x06, 0x05, 0xc4, 0x6f, 0xc3, 0xfa, 0x29, 0x85,
	0x74, 0xf3, 0xa0, 0x64, 0xcd, 0x99, 0xb1, 0xb4, 0xcd, 0x79, 0x04, 0xf8, 0x54, 0xaa, 0xd9, 0xee,
	0xac, 0x43, 0x23, 0x94, 0x23, 0xc9, 0x5a, 0xa2, 0x11, 0x98, 0x03, 0x6e, 0x42, 0x33, 0x1e, 0x0c,
	0x14, 0xb1, 0x2e, 0x7d, 0x23, 0xb0, 0x27, 0x7f, 0x00, 0x6b, 0x53, 0x1a, 0xb6, 0x73, 0x7b, 0x00,
	0x1c, 0xb3, 0x08, 0x4f, 0xe2, 0x71, 0x74, 0xa5, 0x54, 0x40, 0xb0, 0x03, 0xcd, 0x94, 0xd4, 0x38,
	0xcc, 0xe4, 0x6a, 0xed, 0xc5, 0xa3, 0xad, 0x43, 0x91, 0xc8, 0xc3, 0xf2, 0x08, 0x04, 0xd6, 0x4c,
	0x3f, 0x8c, 0x17, 0xba, 0x7c, 0xff, 0xda, 0xc3, 0x98, 0x89, 0xda, 0xd6, 0xfe, 0xb7, 0x03, 0x4b,
	0x16, 0x3b, 0x67, 0xc1, 0x2a, 0xbb, 0x83, 0xe5, 0x88, 0x14, 0x8b, 0x51, 0x62, 0xb3, 0x99, 0x00,
	0x78, 0x0f, 0x56, 0xd3, 0x8f, 0x67, 0xa2, 0xf7, 0x8e, 0x58, 0x05, 0xd4, 0x23, 0x79, 0x41, 0x7d,
	0xdb, 0x89, 0x32, 0x81, 0xf7, 0x61, 0xad, 0x04, 0x3e, 0x7b, 0xa2, 0xb3, 0x6e, 0x04, 0x55, 0x54,
	0xa6, 0xcf, 0x25, 0xfd, 0xba, 0xd1, 0x2f, 0x11, 0x78, 0x00, 0x2b, 0x39, 0xf8, 0x78, 0x24, 0x99,
	0xa9, 0xaf, 0xcb, 0xd2, 0x08, 0x4a, 0xb8, 0xff, 0xcd, 0x81, 0xcd, 0x49, 0x5f, 0x75, 0xae, 0xd7,
	0xb7, 0xce, 0x83, 0x96, 0x8c, 0x98, 0xd2, 0x0b, 0x11, 0xda, 0xf6, 0xe5, 0x67, 0xbc, 0x03, 0xff,
	0x29, 0x16, 0x29, 0x3f, 0xcf, 0xab, 0x64, 0xba, 0x38, 0x83, 0xa2, 0x0f, 0x4b, 0x14, 0xf5, 0x27,
	0x56, 0x75, 0x6d, 0x35, 0x85, 0xf9, 0xa7, 0xb0, 0x55, 0x8a, 0xc9, 0x4e, 0xee, 0xdd, 0x7c, 0x32,
	0x1d, 0x3d, 0x99, 0xab, 0x66, 0x32, 0x8b, 0xa6, 0xd6, 0xe0, 0xe8, 0xb2, 0x0e, 0xf3, 0x96, 0xc0,
	0x97, 0xd0, 0x34, 0x1b, 0x10, 0xb7, 0xb5, 0x43, 0xd5, 0x12, 0xf7, 0xbc, 0x2a, 0xca, 0x0e, 0x84,
	0xfb, 0xf5, 0xe7, 0xaf, 0xef, 0x73, 0xe8, 0x2f, 0xeb, 0x3f, 0x83, 0xfd, 0x71, 0xa8, 0x87, 0xce,
	0x01, 0x9e, 0x43, 0xad, 0x4b, 0x8c, 0x9b, 0xa5, 0x27, 0x62, 0x44, 0xaf, 0x7b, 0x3a, 0xfe, 0x8e,
	0x56, 0xdc, 0xc0, 0xb5, 0x29, 0xc5, 0xce, 0xe7, 0x91, 0xe8, 0x7d, 0xc1, 0xd7, 0xd0, 0x34, 0x83,
	0x69, 0xe3, 0xad, 0x7a, 0x5b, 0x36, 0xde, 0xea, 0x01, 0xde, 0xd3, 0xea, 0xae, 0x57, 0xa5, 0x9e,
	0x45, 0xfd, 0x0a, 0x9a, 0x66, 0xeb, 0xd8, 0x0b, 0xaa, 0x96, 0x95, 0xbd, 0xa0, 0x7a, 0x3b, 0xd9,
	0xf0, 0x0f, 0x2a, 0xc3, 0x3f, 0x83, 0x7a, 0xb6, 0x76, 0xd0, 0x24, 0x5f, 0xde, 0x62, 0x9e, 0x5b,
	0x26, 0xac, 0xee, 0x86, 0xd6, 0xfd, 0x1f, 0xa7, 0x0b, 0x8d, 0x6f, 0xa1, 0xd5, 0x25, 0x36, 0x6f,
	0x71, 0x67, 0xa6, 0xa4, 0xc5, 0xa9, 0xf5, 0x76, 0xab, 0x49, 0xab, 0x7e, 0x4b, 0xab, 0xef, 0xe0,
	0x76, 0x45, 0xd4, 0x1d, 0x95, 0x99, 0xbe, 0x69, 0xea, 0x5f, 0xfd, 0x83, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe6, 0xa1, 0x2a, 0x40, 0x1e, 0x08, 0x00, 0x00,
}
