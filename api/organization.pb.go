// Code generated by protoc-gen-go. DO NOT EDIT.
// source: organization.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request the organizations defined in the system.
type ListOrganizationRequest struct {
	// Max number of organizations to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// When provided, the given string will be used to search on
	// displayName.
	Search string `protobuf:"bytes,3,opt,name=search" json:"search,omitempty"`
}

func (m *ListOrganizationRequest) Reset()                    { *m = ListOrganizationRequest{} }
func (m *ListOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*ListOrganizationRequest) ProtoMessage()               {}
func (*ListOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *ListOrganizationRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListOrganizationRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListOrganizationRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

// Request the user information.
type OrganizationRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *OrganizationRequest) Reset()                    { *m = OrganizationRequest{} }
func (m *OrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*OrganizationRequest) ProtoMessage()               {}
func (*OrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *OrganizationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetOrganizationResponse struct {
	// ID of the user.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Organization name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Organization display name.
	DisplayName string `protobuf:"bytes,3,opt,name=displayName" json:"displayName,omitempty"`
	// Can the organization create and "own" Gateways?
	CanHaveGateways bool `protobuf:"varint,4,opt,name=canHaveGateways" json:"canHaveGateways,omitempty"`
	// When the user was created.
	CreatedAt string `protobuf:"bytes,5,opt,name=createdAt" json:"createdAt,omitempty"`
	// When the user was last updated (excludes changes in application access).
	UpdatedAt string `protobuf:"bytes,6,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetOrganizationResponse) Reset()                    { *m = GetOrganizationResponse{} }
func (m *GetOrganizationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationResponse) ProtoMessage()               {}
func (*GetOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *GetOrganizationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetOrganizationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetOrganizationResponse) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GetOrganizationResponse) GetCanHaveGateways() bool {
	if m != nil {
		return m.CanHaveGateways
	}
	return false
}

func (m *GetOrganizationResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetOrganizationResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

// Add a new organization.
type CreateOrganizationRequest struct {
	// Organization name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Organization display name.
	DisplayName string `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	// Can the organization create and "own" Gateways?
	CanHaveGateways bool `protobuf:"varint,3,opt,name=canHaveGateways" json:"canHaveGateways,omitempty"`
}

func (m *CreateOrganizationRequest) Reset()                    { *m = CreateOrganizationRequest{} }
func (m *CreateOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateOrganizationRequest) ProtoMessage()               {}
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *CreateOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateOrganizationRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CreateOrganizationRequest) GetCanHaveGateways() bool {
	if m != nil {
		return m.CanHaveGateways
	}
	return false
}

type CreateOrganizationResponse struct {
	// ID of the organization.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateOrganizationResponse) Reset()                    { *m = CreateOrganizationResponse{} }
func (m *CreateOrganizationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateOrganizationResponse) ProtoMessage()               {}
func (*CreateOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *CreateOrganizationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Not quite the AddOrganizationRequest.
type UpdateOrganizationRequest struct {
	// The ID of the organization to be updated.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The new name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The new display name.
	DisplayName string `protobuf:"bytes,3,opt,name=displayName" json:"displayName,omitempty"`
	// Can the organization create and "own" Gateways?
	CanHaveGateways bool `protobuf:"varint,4,opt,name=canHaveGateways" json:"canHaveGateways,omitempty"`
}

func (m *UpdateOrganizationRequest) Reset()                    { *m = UpdateOrganizationRequest{} }
func (m *UpdateOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateOrganizationRequest) ProtoMessage()               {}
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *UpdateOrganizationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOrganizationRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *UpdateOrganizationRequest) GetCanHaveGateways() bool {
	if m != nil {
		return m.CanHaveGateways
	}
	return false
}

type ListOrganizationResponse struct {
	TotalCount int32                      `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	Result     []*GetOrganizationResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListOrganizationResponse) Reset()                    { *m = ListOrganizationResponse{} }
func (m *ListOrganizationResponse) String() string            { return proto.CompactTextString(m) }
func (*ListOrganizationResponse) ProtoMessage()               {}
func (*ListOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *ListOrganizationResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListOrganizationResponse) GetResult() []*GetOrganizationResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type OrganizationEmptyResponse struct {
}

func (m *OrganizationEmptyResponse) Reset()                    { *m = OrganizationEmptyResponse{} }
func (m *OrganizationEmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*OrganizationEmptyResponse) ProtoMessage()               {}
func (*OrganizationEmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

type OrganizationUserRequest struct {
	// The organization id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The user's id.
	UserID int64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
	// The user's admin status for the organization
	IsAdmin bool `protobuf:"varint,3,opt,name=isAdmin" json:"isAdmin,omitempty"`
}

func (m *OrganizationUserRequest) Reset()                    { *m = OrganizationUserRequest{} }
func (m *OrganizationUserRequest) String() string            { return proto.CompactTextString(m) }
func (*OrganizationUserRequest) ProtoMessage()               {}
func (*OrganizationUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *OrganizationUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OrganizationUserRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OrganizationUserRequest) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type DeleteOrganizationUserRequest struct {
	// The organization id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The user's id.
	UserID int64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *DeleteOrganizationUserRequest) Reset()                    { *m = DeleteOrganizationUserRequest{} }
func (m *DeleteOrganizationUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteOrganizationUserRequest) ProtoMessage()               {}
func (*DeleteOrganizationUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *DeleteOrganizationUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteOrganizationUserRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// Request the users in an organization.
type ListOrganizationUsersRequest struct {
	// The organization id.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Max number of users to return in the result-set.
	Limit int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListOrganizationUsersRequest) Reset()                    { *m = ListOrganizationUsersRequest{} }
func (m *ListOrganizationUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListOrganizationUsersRequest) ProtoMessage()               {}
func (*ListOrganizationUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *ListOrganizationUsersRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListOrganizationUsersRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListOrganizationUsersRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetOrganizationUserRequest struct {
	// ID of the organization.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// ID of the user.
	UserID int64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetOrganizationUserRequest) Reset()                    { *m = GetOrganizationUserRequest{} }
func (m *GetOrganizationUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationUserRequest) ProtoMessage()               {}
func (*GetOrganizationUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *GetOrganizationUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetOrganizationUserRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// Response for a user in the organization
type GetOrganizationUserResponse struct {
	// ID of the user.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Username of the user.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// If the user is a system admin, capable of creating other users.
	IsAdmin bool `protobuf:"varint,3,opt,name=isAdmin" json:"isAdmin,omitempty"`
	// When the user was created.
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	// When the user was last updated (excludes changes in application access).
	UpdatedAt string `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetOrganizationUserResponse) Reset()                    { *m = GetOrganizationUserResponse{} }
func (m *GetOrganizationUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationUserResponse) ProtoMessage()               {}
func (*GetOrganizationUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *GetOrganizationUserResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetOrganizationUserResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetOrganizationUserResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *GetOrganizationUserResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetOrganizationUserResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

// Response for the users in an organization.
type ListOrganizationUsersResponse struct {
	// The total number of users in the organization.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// The users in the requested limit, offset range.
	Result []*GetOrganizationUserResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListOrganizationUsersResponse) Reset()                    { *m = ListOrganizationUsersResponse{} }
func (m *ListOrganizationUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListOrganizationUsersResponse) ProtoMessage()               {}
func (*ListOrganizationUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *ListOrganizationUsersResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListOrganizationUsersResponse) GetResult() []*GetOrganizationUserResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*ListOrganizationRequest)(nil), "api.ListOrganizationRequest")
	proto.RegisterType((*OrganizationRequest)(nil), "api.OrganizationRequest")
	proto.RegisterType((*GetOrganizationResponse)(nil), "api.GetOrganizationResponse")
	proto.RegisterType((*CreateOrganizationRequest)(nil), "api.CreateOrganizationRequest")
	proto.RegisterType((*CreateOrganizationResponse)(nil), "api.CreateOrganizationResponse")
	proto.RegisterType((*UpdateOrganizationRequest)(nil), "api.UpdateOrganizationRequest")
	proto.RegisterType((*ListOrganizationResponse)(nil), "api.ListOrganizationResponse")
	proto.RegisterType((*OrganizationEmptyResponse)(nil), "api.OrganizationEmptyResponse")
	proto.RegisterType((*OrganizationUserRequest)(nil), "api.OrganizationUserRequest")
	proto.RegisterType((*DeleteOrganizationUserRequest)(nil), "api.DeleteOrganizationUserRequest")
	proto.RegisterType((*ListOrganizationUsersRequest)(nil), "api.ListOrganizationUsersRequest")
	proto.RegisterType((*GetOrganizationUserRequest)(nil), "api.GetOrganizationUserRequest")
	proto.RegisterType((*GetOrganizationUserResponse)(nil), "api.GetOrganizationUserResponse")
	proto.RegisterType((*ListOrganizationUsersResponse)(nil), "api.ListOrganizationUsersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Organization service

type OrganizationClient interface {
	// Get organization list.
	List(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error)
	// Get data for a particular organization.
	Get(ctx context.Context, in *OrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// Create a new organization.
	Create(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// Update an existing organization.
	Update(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error)
	// Delete an organization.
	Delete(ctx context.Context, in *OrganizationRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error)
	// Get organization's user list.
	ListUsers(ctx context.Context, in *ListOrganizationUsersRequest, opts ...grpc.CallOption) (*ListOrganizationUsersResponse, error)
	// Get data for a particular organization user.
	GetUser(ctx context.Context, in *GetOrganizationUserRequest, opts ...grpc.CallOption) (*GetOrganizationUserResponse, error)
	// Add a new user to an organization.
	AddUser(ctx context.Context, in *OrganizationUserRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error)
	// Update a user in an organization.
	UpdateUser(ctx context.Context, in *OrganizationUserRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error)
	// Delete a user from an organization.
	DeleteUser(ctx context.Context, in *DeleteOrganizationUserRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error)
}

type organizationClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationClient(cc *grpc.ClientConn) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) List(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error) {
	out := new(ListOrganizationResponse)
	err := grpc.Invoke(ctx, "/api.Organization/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Get(ctx context.Context, in *OrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := grpc.Invoke(ctx, "/api.Organization/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Create(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := grpc.Invoke(ctx, "/api.Organization/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Update(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error) {
	out := new(OrganizationEmptyResponse)
	err := grpc.Invoke(ctx, "/api.Organization/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Delete(ctx context.Context, in *OrganizationRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error) {
	out := new(OrganizationEmptyResponse)
	err := grpc.Invoke(ctx, "/api.Organization/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) ListUsers(ctx context.Context, in *ListOrganizationUsersRequest, opts ...grpc.CallOption) (*ListOrganizationUsersResponse, error) {
	out := new(ListOrganizationUsersResponse)
	err := grpc.Invoke(ctx, "/api.Organization/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetUser(ctx context.Context, in *GetOrganizationUserRequest, opts ...grpc.CallOption) (*GetOrganizationUserResponse, error) {
	out := new(GetOrganizationUserResponse)
	err := grpc.Invoke(ctx, "/api.Organization/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) AddUser(ctx context.Context, in *OrganizationUserRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error) {
	out := new(OrganizationEmptyResponse)
	err := grpc.Invoke(ctx, "/api.Organization/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) UpdateUser(ctx context.Context, in *OrganizationUserRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error) {
	out := new(OrganizationEmptyResponse)
	err := grpc.Invoke(ctx, "/api.Organization/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteUser(ctx context.Context, in *DeleteOrganizationUserRequest, opts ...grpc.CallOption) (*OrganizationEmptyResponse, error) {
	out := new(OrganizationEmptyResponse)
	err := grpc.Invoke(ctx, "/api.Organization/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Organization service

type OrganizationServer interface {
	// Get organization list.
	List(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error)
	// Get data for a particular organization.
	Get(context.Context, *OrganizationRequest) (*GetOrganizationResponse, error)
	// Create a new organization.
	Create(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// Update an existing organization.
	Update(context.Context, *UpdateOrganizationRequest) (*OrganizationEmptyResponse, error)
	// Delete an organization.
	Delete(context.Context, *OrganizationRequest) (*OrganizationEmptyResponse, error)
	// Get organization's user list.
	ListUsers(context.Context, *ListOrganizationUsersRequest) (*ListOrganizationUsersResponse, error)
	// Get data for a particular organization user.
	GetUser(context.Context, *GetOrganizationUserRequest) (*GetOrganizationUserResponse, error)
	// Add a new user to an organization.
	AddUser(context.Context, *OrganizationUserRequest) (*OrganizationEmptyResponse, error)
	// Update a user in an organization.
	UpdateUser(context.Context, *OrganizationUserRequest) (*OrganizationEmptyResponse, error)
	// Delete a user from an organization.
	DeleteUser(context.Context, *DeleteOrganizationUserRequest) (*OrganizationEmptyResponse, error)
}

func RegisterOrganizationServer(s *grpc.Server, srv OrganizationServer) {
	s.RegisterService(&_Organization_serviceDesc, srv)
}

func _Organization_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).List(ctx, req.(*ListOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Get(ctx, req.(*OrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Create(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Update(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Delete(ctx, req.(*OrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).ListUsers(ctx, req.(*ListOrganizationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetUser(ctx, req.(*GetOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).AddUser(ctx, req.(*OrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).UpdateUser(ctx, req.(*OrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Organization/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteUser(ctx, req.(*DeleteOrganizationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Organization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Organization_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Organization_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Organization_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Organization_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Organization_Delete_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Organization_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Organization_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Organization_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Organization_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Organization_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization.proto",
}

func init() { proto.RegisterFile("organization.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0xe3, 0xc4, 0x6d, 0xa6, 0x08, 0xa4, 0xa5, 0x6a, 0x1c, 0x37, 0x69, 0xc2, 0x4a, 0x45,
	0x51, 0x41, 0x89, 0x28, 0x1c, 0x10, 0xb7, 0xaa, 0x45, 0x01, 0x09, 0x81, 0x64, 0xa9, 0x27, 0x10,
	0xd5, 0x12, 0x6f, 0xdb, 0x95, 0x1c, 0xdb, 0xf5, 0x6e, 0x40, 0xa1, 0x54, 0x42, 0x5c, 0x39, 0xf2,
	0x01, 0x7c, 0x0d, 0x5f, 0xc0, 0x2f, 0xf0, 0x15, 0x9c, 0x90, 0xd7, 0x9b, 0xe2, 0x3a, 0x5e, 0x27,
	0xaa, 0xe0, 0xd6, 0xdd, 0x99, 0xcc, 0x7b, 0xf3, 0xf6, 0xcd, 0xb8, 0x80, 0xc2, 0xf8, 0x84, 0x04,
	0xec, 0x23, 0x11, 0x2c, 0x0c, 0xfa, 0x51, 0x1c, 0x8a, 0x10, 0x99, 0x24, 0x62, 0x4e, 0xeb, 0x24,
	0x0c, 0x4f, 0x7c, 0x3a, 0x20, 0x11, 0x1b, 0x90, 0x20, 0x08, 0x85, 0xcc, 0xe0, 0x69, 0x0a, 0x3e,
	0x82, 0xc6, 0x0b, 0xc6, 0xc5, 0xab, 0xcc, 0x8f, 0x5d, 0x7a, 0x36, 0xa1, 0x5c, 0xa0, 0x75, 0xa8,
	0xf9, 0x6c, 0xcc, 0x84, 0x6d, 0x74, 0x8d, 0x5e, 0xcd, 0x4d, 0x0f, 0x68, 0x03, 0xac, 0xf0, 0xf8,
	0x98, 0x53, 0x61, 0x57, 0xe4, 0xb5, 0x3a, 0x25, 0xf7, 0x9c, 0x92, 0x78, 0x74, 0x6a, 0x9b, 0x5d,
	0xa3, 0x57, 0x77, 0xd5, 0x09, 0x6f, 0xc3, 0xed, 0xa2, 0xe2, 0x37, 0xa1, 0xc2, 0x3c, 0x59, 0xd9,
	0x74, 0x2b, 0xcc, 0xc3, 0x3f, 0x0c, 0x68, 0x0c, 0x69, 0x8e, 0x07, 0x8f, 0xc2, 0x80, 0xd3, 0x7c,
	0x2e, 0x42, 0x50, 0x0d, 0xc8, 0x98, 0x4a, 0x02, 0x75, 0x57, 0xfe, 0x8d, 0xba, 0xb0, 0xe6, 0x31,
	0x1e, 0xf9, 0x64, 0xfa, 0x32, 0x09, 0xa5, 0x1c, 0xb2, 0x57, 0xa8, 0x07, 0xb7, 0x46, 0x24, 0x78,
	0x46, 0xde, 0xd3, 0x21, 0x11, 0xf4, 0x03, 0x99, 0x72, 0xbb, 0xda, 0x35, 0x7a, 0xab, 0x6e, 0xfe,
	0x1a, 0xb5, 0xa0, 0x3e, 0x8a, 0x29, 0x11, 0xd4, 0xdb, 0x13, 0x76, 0x4d, 0x56, 0xfa, 0x7b, 0x91,
	0x44, 0x27, 0x91, 0xa7, 0xa2, 0x56, 0x1a, 0xbd, 0xbc, 0xc0, 0xe7, 0xd0, 0xdc, 0x97, 0xa9, 0x45,
	0x4d, 0xcf, 0x88, 0x1b, 0x7a, 0xe2, 0x95, 0xa5, 0x88, 0x9b, 0x85, 0xc4, 0xf1, 0x7d, 0x70, 0x8a,
	0xc0, 0x8b, 0x65, 0xc4, 0x5f, 0x0d, 0x68, 0x1e, 0x4a, 0xe2, 0x4b, 0x3c, 0xd0, 0xff, 0x16, 0x1d,
	0x47, 0x60, 0xcf, 0x1b, 0x51, 0x31, 0xdf, 0x02, 0x10, 0xa1, 0x20, 0xfe, 0x7e, 0x38, 0x09, 0x66,
	0x76, 0xcc, 0xdc, 0xa0, 0x47, 0x60, 0xc5, 0x94, 0x4f, 0xfc, 0xc4, 0x93, 0x66, 0x6f, 0x6d, 0xb7,
	0xd5, 0x27, 0x11, 0xeb, 0x6b, 0xec, 0xe4, 0xaa, 0x5c, 0xbc, 0x09, 0xcd, 0x6c, 0xfc, 0xe9, 0x38,
	0x12, 0xd3, 0x59, 0x12, 0x7e, 0x0d, 0x8d, 0x6c, 0xf0, 0x90, 0xd3, 0x58, 0xa7, 0xcc, 0x06, 0x58,
	0x13, 0x4e, 0xe3, 0xe7, 0x07, 0x52, 0x1b, 0xd3, 0x55, 0x27, 0x64, 0xc3, 0x0a, 0xe3, 0x7b, 0xde,
	0x98, 0x05, 0xea, 0xbd, 0x66, 0x47, 0x3c, 0x84, 0xf6, 0x01, 0xf5, 0xe9, 0x55, 0xe1, 0xaf, 0x01,
	0x81, 0xdf, 0x40, 0x2b, 0x2f, 0x5a, 0x52, 0x86, 0xeb, 0xea, 0x5c, 0x8e, 0x74, 0xa5, 0x78, 0xa4,
	0xcd, 0xec, 0x48, 0xe3, 0x03, 0x70, 0x72, 0x1a, 0x5e, 0x87, 0xe3, 0x77, 0x03, 0x36, 0x0b, 0xcb,
	0x68, 0xa6, 0xdb, 0x81, 0xd5, 0xe4, 0x97, 0x19, 0xb3, 0x5d, 0x9e, 0xf5, 0x92, 0x5e, 0x9d, 0xd9,
	0x6a, 0xe9, 0xcc, 0xd6, 0xf2, 0x33, 0x3b, 0x85, 0xb6, 0x46, 0xc5, 0x25, 0xfd, 0xf7, 0x38, 0xe7,
	0xbf, 0x6e, 0x91, 0xff, 0xb2, 0x4d, 0xcf, 0x3c, 0xb8, 0xfb, 0x7b, 0x15, 0x6e, 0x64, 0x93, 0xd0,
	0x11, 0x54, 0x13, 0x2e, 0x28, 0xb5, 0xb0, 0x66, 0x35, 0x3b, 0x6d, 0x4d, 0x54, 0x99, 0xd7, 0xf9,
	0xf2, 0xf3, 0xd7, 0xb7, 0xca, 0x3a, 0x42, 0x72, 0xe9, 0x67, 0x3f, 0x0c, 0x1c, 0xbd, 0x05, 0x73,
	0x48, 0x05, 0xb2, 0x65, 0x85, 0xa2, 0xda, 0xa5, 0xc3, 0x83, 0x3b, 0xb2, 0x74, 0x13, 0x35, 0xe6,
	0x4b, 0x0f, 0xce, 0x99, 0x77, 0x81, 0x4e, 0xc1, 0x4a, 0x77, 0x10, 0xda, 0x92, 0x85, 0xb4, 0xdb,
	0xd0, 0xe9, 0x68, 0xe3, 0x0a, 0xab, 0x2d, 0xb1, 0x1a, 0xb8, 0xa0, 0x8d, 0x27, 0xc6, 0x0e, 0xf2,
	0xc1, 0x4a, 0xd7, 0x97, 0x42, 0xd2, 0xee, 0x32, 0x67, 0x6b, 0xae, 0xd9, 0xab, 0xc3, 0x8e, 0x25,
	0x50, 0xcb, 0xd1, 0x35, 0x95, 0xa0, 0x8d, 0xc0, 0x4a, 0x67, 0xb6, 0x44, 0xba, 0x45, 0x38, 0x4a,
	0xbc, 0x1d, 0xad, 0x78, 0x53, 0xa8, 0x27, 0x8f, 0x2a, 0xdd, 0x87, 0xee, 0x14, 0x3e, 0x72, 0x76,
	0xbe, 0x1d, 0x5c, 0x96, 0xa2, 0x40, 0xb7, 0x25, 0x68, 0x07, 0xb5, 0x35, 0xa0, 0x83, 0x89, 0x44,
	0xfb, 0x04, 0x2b, 0x43, 0x2a, 0x91, 0x51, 0x47, 0x6f, 0xdf, 0x14, 0x76, 0xa1, 0xbf, 0x71, 0x5f,
	0x82, 0xf6, 0xd0, 0xdd, 0x52, 0xd0, 0xc1, 0x79, 0xba, 0x23, 0x2e, 0xd0, 0x19, 0xac, 0xec, 0x79,
	0x9e, 0x44, 0x6f, 0xcd, 0x89, 0x98, 0x85, 0x5e, 0x24, 0x71, 0x4f, 0x02, 0x63, 0x5c, 0xde, 0x6d,
	0xf2, 0xa0, 0x17, 0x00, 0xa9, 0x63, 0xfe, 0x01, 0xea, 0x03, 0x89, 0x7a, 0xcf, 0x59, 0xb2, 0xdd,
	0x04, 0xfe, 0xb3, 0x01, 0x90, 0x1a, 0x4a, 0xe2, 0xa7, 0x2f, 0x59, 0xfa, 0x55, 0x58, 0xc8, 0x42,
	0x89, 0xbe, 0xb3, 0x24, 0x8b, 0x77, 0x96, 0xfc, 0x17, 0xf0, 0xe1, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x81, 0xc9, 0x5a, 0xec, 0x3b, 0x0a, 0x00, 0x00,
}
