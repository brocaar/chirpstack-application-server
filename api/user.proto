syntax = "proto3";

package api;


// for grpc-gateway
import "google/api/annotations.proto";

// User is the service managing the user access.
service User {
	// Get user list.
	rpc List(ListUserRequest) returns (ListUserResponse) {
		option(google.api.http) = {
			get: "/api/users"
		};
	}

	// Get data for a particular user.
	rpc Get(UserRequest) returns (UserResponse) {
		option(google.api.http) = {
			get: "/api/users/{id}"
		};
	}

	// Create a new user.
	rpc Create(AddUserRequest) returns (AddUserResponse) {
		option(google.api.http) = {
			post: "/api/users"
		};
	}

	// Update an existing user.
	rpc Update(UpdateUserRequest) returns (UserEmptyResponse) {
		option(google.api.http) = {
			put: "/api/users/{id}"
		};
	}

	// Delete a user.
	rpc Delete(UserRequest) returns (UserEmptyResponse) {
		option(google.api.http) = {
			delete: "/api/users/{id}"
		};
	}

	// UpdatePassword updates a password.
	rpc UpdatePassword(UpdateUserPasswordRequest) returns (UserEmptyResponse) {
		option(google.api.http) = {
			put: "/api/users/{id}/password"
		};
	}

}

// Internal is the service managing the user login and profile.
service Internal {
	// Log in a user
	rpc Login(LoginRequest) returns (LoginResponse) {
		option(google.api.http) = {
			post: "/api/internal/login"
		};
	}

	// Get the current user's profile
	rpc Profile(ProfileRequest) returns (ProfileResponse) {
		option(google.api.http) = {
			get: "/api/internal/profile"
		};
	}
}

// Defines the applications that the user is associated with.
message ApplicationLink {
	int64 applicationID = 1;
	string applicationName = 2;
	bool isAdmin = 3;
	string createdAt = 4;
	string updatedAt = 5;
}

// The user profile, indicating the capabilities of the user.
message UserProfile {
	repeated ApplicationLink applications = 1;
}

// The request for profile requires not input as the profile is returned for
// the logged in user based on the JWT token passed in.
message ProfileRequest {
}

// The user's profile. This specifies the access the user has to the data
// and should be used limit what the UI presents as options (e.g., read-only
// access to an application should not allow an "edit" button on that
// application).
message ProfileResponse {
	UserProfile userProfile = 1;
}


// The data for logging in to the system.  The connection is expected to be
// protected by SSL, allowing us to use the username and password in the clear.
message LoginRequest {
	// Username of the user.
	string username = 1;

	// Password of the user.
	string password = 2;
}

// The response to the login request upon success. The jwt token is to be
// placed in the header field named "Grpc-Metadata-Authorization" for all
// subsequent queries to the server.
message LoginResponse {
	// The JWT tag to be used to access lora-app-server interfaces.
	string jwt = 1;

	// The user's profile (provided as a convenience so an additional call to
	// get the profile can be avoided).
	ProfileResponse profile = 2;
}

// Request the users defined in the system.
message ListUserRequest {
	// Max number of user to return in the result-set.
	int32 limit = 1;

	// Offset in the result-set (for pagination).
	int32 offset = 2;
}

// Request the user information.
message UserRequest {
	int64 id = 1;
}

message AddUserResponse {
	int64 id = 1;
}

// User data not including the data access profile.
message UserSettings {
	// ID of the user.
	int64 id = 1;
	
	// Username of the user.
	string username = 2;

	// The session timeout, in minutes.
	int32 sessionTTL = 3;

	// If the user is a system admin, capable of creating other users.
	bool isAdmin = 4;

	// When the user was created.
	string createdAt = 5;

	// When the user was last updated (excludes changes in application access).
	string updatedAt = 6;
}

// UserInfo includes the general login settings as well as the user profile.
message UserInfo {
	UserSettings userSettings = 1;
	UserProfile userProfile = 2;
}

message UserResponse {
	// The user settings and profile.
	UserInfo info = 1;
}

// Add a new user. Not quite the UserSettings data as it includes a password
// and excludes the ID and create/update dates.
message AddUserRequest {
	// Username of the user.
	string username = 1;

	// Passowrd of the user.
	string password = 2;

	// The session timeout, in minutes.
	int32 sessionTTL = 3;

	// If the user is a system-wide admin.
	bool isAdmin = 4;
}

// Not quite the AddUserRequest as no password.
message UpdateUserRequest {
	// The ID of the user to be updated.
	int64 id = 1;

	// The new username.
	string username = 2;

	// The session timeout, in minutes.
	int32 sessionTTL = 3;

	// If the user is a system-wide admin.
	bool isAdmin = 4;
}

message ListUserResponse {
	int32 totalCount = 1;
	repeated UserResponse users = 2;
}

message UserEmptyResponse {
	// Nothing to return on delete.
}

message UpdateUserPasswordRequest {
	// The ID of the user for which to update the password.
	int64 id = 1;

	// The new password to set.
	string password = 2;
}
